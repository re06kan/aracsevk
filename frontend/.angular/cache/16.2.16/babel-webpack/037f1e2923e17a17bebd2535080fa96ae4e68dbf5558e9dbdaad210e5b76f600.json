{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nclass VehicleService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = environment.apiUrl + '/vehicles';\n  }\n  getHeaders() {\n    const token = this.authService.getToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  getVehicles() {\n    return this.http.get(this.apiUrl, {\n      headers: this.getHeaders()\n    }).pipe(catchError(error => {\n      console.error('Vehicle fetch error:', error);\n      return throwError(() => new Error('Araçlar getirilemedi'));\n    }));\n  }\n  getVehicleStats() {\n    return this.http.get(this.apiUrl + '/stats', {\n      headers: this.getHeaders()\n    }).pipe(catchError(error => {\n      console.error('Vehicle stats error:', error);\n      return throwError(() => new Error('Araç istatistikleri alınamadı'));\n    }));\n  }\n  static {\n    this.ɵfac = function VehicleService_Factory(t) {\n      return new (t || VehicleService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: VehicleService,\n      factory: VehicleService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { VehicleService };","map":{"version":3,"names":["HttpHeaders","throwError","catchError","environment","VehicleService","constructor","http","authService","apiUrl","getHeaders","token","getToken","getVehicles","get","headers","pipe","error","console","Error","getVehicleStats","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\work\\aracsevk\\frontend\\src\\app\\services\\vehicle.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { Vehicle } from '../models/vehicle.model';\nimport { AuthService } from './auth.service';\n\nexport interface VehicleStats {\n  total: number;\n  ready: number;\n  onDuty: number;\n  longRoute: number;\n  standby: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VehicleService {\n  private apiUrl = environment.apiUrl + '/vehicles';\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {}\n\n  private getHeaders(): HttpHeaders {\n    const token = this.authService.getToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n\n  getVehicles(): Observable<Vehicle[]> {\n    return this.http.get<Vehicle[]>(this.apiUrl, { \n      headers: this.getHeaders() \n    }).pipe(\n      catchError(error => {\n        console.error('Vehicle fetch error:', error);\n        return throwError(() => new Error('Araçlar getirilemedi'));\n      })\n    );\n  }\n\n  getVehicleStats(): Observable<VehicleStats> {\n    return this.http.get<VehicleStats>(this.apiUrl + '/stats', { \n      headers: this.getHeaders() \n    }).pipe(\n      catchError(error => {\n        console.error('Vehicle stats error:', error);\n        return throwError(() => new Error('Araç istatistikleri alınamadı'));\n      })\n    );\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,QAAQ,gCAAgC;;;;AAY5D,MAGaC,cAAc;EAGzBC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;IAJb,KAAAC,MAAM,GAAGL,WAAW,CAACK,MAAM,GAAG,WAAW;EAK9C;EAEKC,UAAUA,CAAA;IAChB,MAAMC,KAAK,GAAG,IAAI,CAACH,WAAW,CAACI,QAAQ,EAAE;IACzC,OAAO,IAAIX,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUU,KAAK;KACjC,CAAC;EACJ;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAY,IAAI,CAACL,MAAM,EAAE;MAC3CM,OAAO,EAAE,IAAI,CAACL,UAAU;KACzB,CAAC,CAACM,IAAI,CACLb,UAAU,CAACc,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOf,UAAU,CAAC,MAAM,IAAIiB,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC5D,CAAC,CAAC,CACH;EACH;EAEAC,eAAeA,CAAA;IACb,OAAO,IAAI,CAACb,IAAI,CAACO,GAAG,CAAe,IAAI,CAACL,MAAM,GAAG,QAAQ,EAAE;MACzDM,OAAO,EAAE,IAAI,CAACL,UAAU;KACzB,CAAC,CAACM,IAAI,CACLb,UAAU,CAACc,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOf,UAAU,CAAC,MAAM,IAAIiB,KAAK,CAAC,+BAA+B,CAAC,CAAC;IACrE,CAAC,CAAC,CACH;EACH;;;uBApCWd,cAAc,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAdrB,cAAc;MAAAsB,OAAA,EAAdtB,cAAc,CAAAuB,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;SAEPxB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}