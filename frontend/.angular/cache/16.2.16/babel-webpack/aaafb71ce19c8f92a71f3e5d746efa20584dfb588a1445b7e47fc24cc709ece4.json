{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nclass JwtInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(request, next) {\n    // Mevcut kullanıcıyı al\n    const currentUser = this.authService.currentUserValue;\n    // Kullanıcı varsa ve token varsa\n    if (currentUser && currentUser.accessToken) {\n      // İsteğe token ekle\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.accessToken}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n  static {\n    this.ɵfac = function JwtInterceptor_Factory(t) {\n      return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: JwtInterceptor,\n      factory: JwtInterceptor.ɵfac\n    });\n  }\n}\nexport { JwtInterceptor };","map":{"version":3,"names":["JwtInterceptor","constructor","authService","intercept","request","next","currentUser","currentUserValue","accessToken","clone","setHeaders","Authorization","handle","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["C:\\work\\aracsevk\\frontend\\src\\app\\helpers\\jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n    constructor(private authService: AuthService) {}\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // Mevcut kullanıcıyı al\n        const currentUser = this.authService.currentUserValue;\n        \n        // Kullanıcı varsa ve token varsa\n        if (currentUser && currentUser.accessToken) {\n            // İsteğe token ekle\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${currentUser.accessToken}`\n                }\n            });\n        }\n\n        return next.handle(request);\n    }\n}\n"],"mappings":";;AAKA,MACaA,cAAc;EACvBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IAClD;IACA,MAAMC,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACK,gBAAgB;IAErD;IACA,IAAID,WAAW,IAAIA,WAAW,CAACE,WAAW,EAAE;MACxC;MACAJ,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACpBC,UAAU,EAAE;UACRC,aAAa,EAAE,UAAUL,WAAW,CAACE,WAAW;;OAEvD,CAAC;;IAGN,OAAOH,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC/B;;;uBAlBSJ,cAAc,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAdhB,cAAc;MAAAiB,OAAA,EAAdjB,cAAc,CAAAkB;IAAA;EAAA;;SAAdlB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}