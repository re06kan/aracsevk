{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/auth';\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(tcKimlikNo, sifre) {\n    return this.http.post(`${this.apiUrl}/giris`, {\n      tcKimlikNo,\n      sifre\n    }).pipe(map(user => {\n      // Login başarılı ise\n      if (user && user.accessToken) {\n        // Kullanıcı bilgilerini local storage'a kaydet\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        // BehaviorSubject'i güncelle\n        this.currentUserSubject.next(user);\n      }\n      return user;\n    }));\n  }\n  logout() {\n    // Local storage'dan kullanıcı bilgilerini sil\n    localStorage.removeItem('currentUser');\n    // BehaviorSubject'i null yap\n    this.currentUserSubject.next(null);\n  }\n  isLoggedIn() {\n    return !!this.currentUserValue;\n  }\n  getUserRole() {\n    // Backend'den rol bilgisi gelmediği için geçici bir çözüm\n    return this.currentUserValue?.tcKimlikNo === '12345678901' ? 'admin' : 'user';\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","map","AuthService","constructor","http","apiUrl","storedUser","localStorage","getItem","currentUserSubject","JSON","parse","currentUser","asObservable","currentUserValue","value","login","tcKimlikNo","sifre","post","pipe","user","accessToken","setItem","stringify","next","logout","removeItem","isLoggedIn","getUserRole","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\work\\aracsevk\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface User {\n  id: number;\n  tcKimlikNo: string;\n  ad: string;\n  soyad: string;\n  role?: 'admin' | 'user' | 'driver';\n  accessToken?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject: BehaviorSubject<User | null>;\n  public currentUser: Observable<User | null>;\n\n  private apiUrl = 'http://localhost:3000/api/auth';\n\n  constructor(private http: HttpClient) {\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject<User | null>(\n      storedUser ? JSON.parse(storedUser) : null\n    );\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  login(tcKimlikNo: string, sifre: string): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}/giris`, { tcKimlikNo, sifre }).pipe(\n      map(user => {\n        // Login başarılı ise\n        if (user && user.accessToken) {\n          // Kullanıcı bilgilerini local storage'a kaydet\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          \n          // BehaviorSubject'i güncelle\n          this.currentUserSubject.next(user);\n        }\n        return user;\n      })\n    );\n  }\n\n  logout() {\n    // Local storage'dan kullanıcı bilgilerini sil\n    localStorage.removeItem('currentUser');\n    \n    // BehaviorSubject'i null yap\n    this.currentUserSubject.next(null);\n  }\n\n  isLoggedIn(): boolean {\n    return !!this.currentUserValue;\n  }\n\n  getUserRole(): 'admin' | 'user' | 'driver' | null {\n    // Backend'den rol bilgisi gelmediği için geçici bir çözüm\n    return this.currentUserValue?.tcKimlikNo === '12345678901' ? 'admin' : 'user';\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAWpC,MAGaC,WAAW;EAMtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,gCAAgC;IAG/C,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAI,CAACC,kBAAkB,GAAG,IAAIT,eAAe,CAC3CM,UAAU,GAAGI,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,GAAG,IAAI,CAC3C;IACD,IAAI,CAACM,WAAW,GAAG,IAAI,CAACH,kBAAkB,CAACI,YAAY,EAAE;EAC3D;EAEA,IAAWC,gBAAgBA,CAAA;IACzB,OAAO,IAAI,CAACL,kBAAkB,CAACM,KAAK;EACtC;EAEAC,KAAKA,CAACC,UAAkB,EAAEC,KAAa;IACrC,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAO,GAAG,IAAI,CAACd,MAAM,QAAQ,EAAE;MAAEY,UAAU;MAAEC;IAAK,CAAE,CAAC,CAACE,IAAI,CAC7EnB,GAAG,CAACoB,IAAI,IAAG;MACT;MACA,IAAIA,IAAI,IAAIA,IAAI,CAACC,WAAW,EAAE;QAC5B;QACAf,YAAY,CAACgB,OAAO,CAAC,aAAa,EAAEb,IAAI,CAACc,SAAS,CAACH,IAAI,CAAC,CAAC;QAEzD;QACA,IAAI,CAACZ,kBAAkB,CAACgB,IAAI,CAACJ,IAAI,CAAC;;MAEpC,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACH;EAEAK,MAAMA,CAAA;IACJ;IACAnB,YAAY,CAACoB,UAAU,CAAC,aAAa,CAAC;IAEtC;IACA,IAAI,CAAClB,kBAAkB,CAACgB,IAAI,CAAC,IAAI,CAAC;EACpC;EAEAG,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACd,gBAAgB;EAChC;EAEAe,WAAWA,CAAA;IACT;IACA,OAAO,IAAI,CAACf,gBAAgB,EAAEG,UAAU,KAAK,aAAa,GAAG,OAAO,GAAG,MAAM;EAC/E;;;uBAjDWf,WAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX/B,WAAW;MAAAgC,OAAA,EAAXhC,WAAW,CAAAiC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEPlC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}