{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nclass VehicleService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = environment.apiUrl + '/vehicles';\n  }\n  getHeaders() {\n    const token = this.authService.getToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  mapToVehicle(rawVehicle) {\n    const status = rawVehicle.status === 'hazır' ? 'hazır' : rawVehicle.status === 'görevde' ? 'görevde' : 'kademede';\n    return {\n      plate: rawVehicle.plate,\n      model: rawVehicle.model,\n      status: status\n    };\n  }\n  getVehicles() {\n    console.log('Fetching vehicles from:', this.apiUrl);\n    return this.http.get(this.apiUrl, {\n      headers: this.getHeaders()\n    }).pipe(tap(vehicles => console.log('Raw vehicles:', vehicles)), map(vehicles => vehicles.map(this.mapToVehicle)), tap(vehicles => console.log('Mapped vehicles:', vehicles)), catchError(error => {\n      console.error('Vehicle fetch error:', error);\n      // Mock veriler\n      return of([{\n        plate: '34ABC123',\n        model: 'Mercedes Sprinter',\n        status: 'hazır'\n      }, {\n        plate: '34XYZ789',\n        model: 'Ford Transit',\n        status: 'görevde'\n      }]);\n    }));\n  }\n  getVehicleStats() {\n    return this.http.get(this.apiUrl + '/stats', {\n      headers: this.getHeaders()\n    }).pipe(catchError(error => {\n      console.error('Vehicle stats error:', error);\n      // Mock istatistikler\n      return of({\n        total: 2,\n        ready: 1,\n        onDuty: 1,\n        longRoute: 0,\n        standby: 0\n      });\n    }));\n  }\n  static {\n    this.ɵfac = function VehicleService_Factory(t) {\n      return new (t || VehicleService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: VehicleService,\n      factory: VehicleService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { VehicleService };","map":{"version":3,"names":["HttpHeaders","of","catchError","map","tap","environment","VehicleService","constructor","http","authService","apiUrl","getHeaders","token","getToken","mapToVehicle","rawVehicle","status","plate","model","getVehicles","console","log","get","headers","pipe","vehicles","error","getVehicleStats","total","ready","onDuty","longRoute","standby","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\work\\aracsevk\\frontend\\src\\app\\services\\vehicle.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { Vehicle } from '../models/vehicle.model';\nimport { AuthService } from './auth.service';\n\nexport interface VehicleStats {\n  total: number;\n  ready: number;\n  onDuty: number;\n  longRoute: number;\n  standby: number;\n}\n\ninterface RawVehicle {\n  plate: string;\n  model: string;\n  status: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class VehicleService {\n  private apiUrl = environment.apiUrl + '/vehicles';\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {}\n\n  private getHeaders(): HttpHeaders {\n    const token = this.authService.getToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n\n  private mapToVehicle(rawVehicle: RawVehicle): Vehicle {\n    const status = rawVehicle.status === 'hazır' ? 'hazır' :\n                   rawVehicle.status === 'görevde' ? 'görevde' :\n                   'kademede';\n\n    return {\n      plate: rawVehicle.plate,\n      model: rawVehicle.model,\n      status: status\n    };\n  }\n\n  getVehicles(): Observable<Vehicle[]> {\n    console.log('Fetching vehicles from:', this.apiUrl);\n    return this.http.get<RawVehicle[]>(this.apiUrl, { \n      headers: this.getHeaders() \n    }).pipe(\n      tap(vehicles => console.log('Raw vehicles:', vehicles)),\n      map(vehicles => vehicles.map(this.mapToVehicle)),\n      tap(vehicles => console.log('Mapped vehicles:', vehicles)),\n      catchError(error => {\n        console.error('Vehicle fetch error:', error);\n        // Mock veriler\n        return of([\n          { plate: '34ABC123', model: 'Mercedes Sprinter', status: 'hazır' },\n          { plate: '34XYZ789', model: 'Ford Transit', status: 'görevde' }\n        ] as Vehicle[]);\n      })\n    );\n  }\n\n  getVehicleStats(): Observable<VehicleStats> {\n    return this.http.get<VehicleStats>(this.apiUrl + '/stats', { \n      headers: this.getHeaders() \n    }).pipe(\n      catchError(error => {\n        console.error('Vehicle stats error:', error);\n        // Mock istatistikler\n        return of({\n          total: 2,\n          ready: 1,\n          onDuty: 1,\n          longRoute: 0,\n          standby: 0\n        });\n      })\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}