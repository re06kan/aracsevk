{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass AuthService {\n  constructor(http) {\n    this.http = http;\n    // Mock kullanıcılar\n    this.mockUsers = [{\n      id: 1,\n      username: 'admin',\n      ad: 'Admin',\n      soyad: 'Kullanıcısı',\n      role: 'admin',\n      token: 'admin-token-123'\n    }, {\n      id: 2,\n      username: 'user',\n      ad: 'Normal',\n      soyad: 'Kullanıcı',\n      role: 'user',\n      token: 'user-token-456'\n    }];\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(username, password) {\n    // Mock login\n    const user = this.mockUsers.find(u => u.username === username);\n    if (user) {\n      // Basit bir mock login\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n      return of(user);\n    }\n    // Login başarısız\n    throw new Error('Invalid credentials');\n  }\n  logout() {\n    // Local storage'dan kullanıcı bilgilerini sil\n    localStorage.removeItem('currentUser');\n    // BehaviorSubject'i null yap\n    this.currentUserSubject.next(null);\n  }\n  isLoggedIn() {\n    return !!this.currentUserValue;\n  }\n  getUserRole() {\n    return this.currentUserValue?.role || null;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport { AuthService };","map":{"version":3,"names":["BehaviorSubject","of","AuthService","constructor","http","mockUsers","id","username","ad","soyad","role","token","storedUser","localStorage","getItem","currentUserSubject","JSON","parse","currentUser","asObservable","currentUserValue","value","login","password","user","find","u","setItem","stringify","next","Error","logout","removeItem","isLoggedIn","getUserRole","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\work\\aracsevk\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface User {\n  id: number;\n  username: string;\n  ad: string;\n  soyad: string;\n  role: 'admin' | 'user' | 'driver';\n  token?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject: BehaviorSubject<User | null>;\n  public currentUser: Observable<User | null>;\n\n  // Mock kullanıcılar\n  private mockUsers: User[] = [\n    {\n      id: 1,\n      username: 'admin',\n      ad: 'Admin',\n      soyad: 'Kullanıcısı',\n      role: 'admin',\n      token: 'admin-token-123'\n    },\n    {\n      id: 2,\n      username: 'user',\n      ad: 'Normal',\n      soyad: 'Kullanıcı',\n      role: 'user',\n      token: 'user-token-456'\n    }\n  ];\n\n  constructor(private http: HttpClient) {\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject<User | null>(\n      storedUser ? JSON.parse(storedUser) : null\n    );\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  login(username: string, password: string): Observable<User> {\n    // Mock login\n    const user = this.mockUsers.find(u => u.username === username);\n    \n    if (user) {\n      // Basit bir mock login\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      this.currentUserSubject.next(user);\n      return of(user);\n    }\n    \n    // Login başarısız\n    throw new Error('Invalid credentials');\n  }\n\n  logout() {\n    // Local storage'dan kullanıcı bilgilerini sil\n    localStorage.removeItem('currentUser');\n    \n    // BehaviorSubject'i null yap\n    this.currentUserSubject.next(null);\n  }\n\n  isLoggedIn(): boolean {\n    return !!this.currentUserValue;\n  }\n\n  getUserRole(): 'admin' | 'user' | 'driver' | null {\n    return this.currentUserValue?.role || null;\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,EAAcC,EAAE,QAAQ,MAAM;;;AAYtD,MAGaC,WAAW;EAwBtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IApBxB;IACQ,KAAAC,SAAS,GAAW,CAC1B;MACEC,EAAE,EAAE,CAAC;MACLC,QAAQ,EAAE,OAAO;MACjBC,EAAE,EAAE,OAAO;MACXC,KAAK,EAAE,aAAa;MACpBC,IAAI,EAAE,OAAO;MACbC,KAAK,EAAE;KACR,EACD;MACEL,EAAE,EAAE,CAAC;MACLC,QAAQ,EAAE,MAAM;MAChBC,EAAE,EAAE,QAAQ;MACZC,KAAK,EAAE,WAAW;MAClBC,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE;KACR,CACF;IAGC,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAI,CAACC,kBAAkB,GAAG,IAAIf,eAAe,CAC3CY,UAAU,GAAGI,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,GAAG,IAAI,CAC3C;IACD,IAAI,CAACM,WAAW,GAAG,IAAI,CAACH,kBAAkB,CAACI,YAAY,EAAE;EAC3D;EAEA,IAAWC,gBAAgBA,CAAA;IACzB,OAAO,IAAI,CAACL,kBAAkB,CAACM,KAAK;EACtC;EAEAC,KAAKA,CAACf,QAAgB,EAAEgB,QAAgB;IACtC;IACA,MAAMC,IAAI,GAAG,IAAI,CAACnB,SAAS,CAACoB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACnB,QAAQ,KAAKA,QAAQ,CAAC;IAE9D,IAAIiB,IAAI,EAAE;MACR;MACAX,YAAY,CAACc,OAAO,CAAC,aAAa,EAAEX,IAAI,CAACY,SAAS,CAACJ,IAAI,CAAC,CAAC;MACzD,IAAI,CAACT,kBAAkB,CAACc,IAAI,CAACL,IAAI,CAAC;MAClC,OAAOvB,EAAE,CAACuB,IAAI,CAAC;;IAGjB;IACA,MAAM,IAAIM,KAAK,CAAC,qBAAqB,CAAC;EACxC;EAEAC,MAAMA,CAAA;IACJ;IACAlB,YAAY,CAACmB,UAAU,CAAC,aAAa,CAAC;IAEtC;IACA,IAAI,CAACjB,kBAAkB,CAACc,IAAI,CAAC,IAAI,CAAC;EACpC;EAEAI,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACb,gBAAgB;EAChC;EAEAc,WAAWA,CAAA;IACT,OAAO,IAAI,CAACd,gBAAgB,EAAEV,IAAI,IAAI,IAAI;EAC5C;;;uBAjEWR,WAAW,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXpC,WAAW;MAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;SAEPvC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}